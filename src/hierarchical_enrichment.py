def test():
	# load motif vector and return edge_list
	motif_dict = json_utility.load_json("/generated_json_file/Unicarbkb_motif_vec_12259.json")
	motif_lib = gc_glycan_motif.GlycanMotifLib(motif_dict)
	dep_tree, edge_list = motif_lib.motif_dependence_tree()

###################################
### Representative Motif Extraction - 1 glycoprofile
###################################

# Occurance based
def hier_enrich_glycoprofile_occurence(glycoprofile,scoredMotifs_occurence_vector,motif_hierarchy,motif_vector):
	"""Perform Hierarchical Enrichment: Motifs occuring in a significant number of glycans using hypergeometric enrichment. 

	Keyword arguments:
	glycoprofile -- list of glycans
	scoredMotifs_occurence_vector -- integer vector, number of occurances of each motif in the glycoprofile (same dimesion of motif_vector)
	motif_hierarchy -- edgelist of motif membership relations (generated by motif_lib.motif_dependence_tree())
	motif_vector -- list of motifs
	"""
	# Number of marbles in the urn is the number of glycans in the glycoprofile
	urn_size = len(glycoprofile)
	# Traverse the `motif hierarchy`
	for motif in motif_vector:
		children = get_children(motif,motif_hierarchy)
		for child in children:
			whiteMarbles_Urn = scoredMotifs_occurence_vector[child]
			whiteMarbles_Select = scoredMotifs_occurence_vector[motif]
			select_size = urn_size # revisit
			hypergeometric(N=urn_size,K=whiteMarbles_Urn,n=select_size,k=whiteMarbles_Select)
			chi_squared([[urn_size,whiteMarbles_Urn],[select_size,whiteMarbles_Select]])
			fisher_squared([[urn_size,whiteMarbles_Urn],[select_size,whiteMarbles_Select]])

###################################
### Representative Motif Extraction - multiple glycoprofiles
###################################

# Abundance-based
def hier_enrich_glycoprofile_abundance(glycoprofiles,scoredMotifs_abundance_matrix,motif_hierarchy,motif_vector,condition):
	"""Perform Hierarchical Enrichment: Compare integer motif scores

	Keyword arguments:
	glycoprofile -- matrix of glycoprofiles
	scoredMotifs_abundance_matrix -- double matrix, motif abundance for each glycoprofile (same dimesion of motif_vector)
	motif_hierarchy -- edgelist of motif membership relations (generated by motif_lib.motif_dependence_tree())
	motif_vector -- list of motifs
	condition -- list of conditions (string or double) for each glycoprofile
	"""
	# Traverse the `motif hierarchy`
	for motif in motif_vector:
		children = get_children(motif,motif_hierarchy)
		for child in children:
			c = scoredMotifs_abundance_matrix[child,]
			m = scoredMotifs_abundance_matrix[motif,]
			LRT(glm('condition ~ c+m'),glm('condition ~ c'))


###################################
### Unique Motif Extraction 		- multiple glycoprofile
###################################

# Occurance based
def hier_enrich_glycoprofile_occurence(glycoprofile,scoredMotifs_occurence_matrix,motif_hierarchy,motif_vector):
	"""Perform Hierarchical Enrichment: Motifs occuring in a significant number of glycans using hypergeometric enrichment. 

	Keyword arguments:
	glycoprofile -- list of glycans
	scoredMotifs_abundance_matrix -- integer matrix, motif abundance for each glycoprofile (same dimesion of motif_vector)
	motif_hierarchy -- edgelist of motif membership relations (generated by motif_lib.motif_dependence_tree())
	motif_vector -- list of motifs
	"""
	# Number of marbles in the urn is the number of glycans in the glycoprofile
	urn_size = len(glycoprofile)
	# Traverse the `motif hierarchy`
	for motif in motif_vector:
		children = get_children(motif,motif_hierarchy)
		for child in children:
			whiteMarbles_Urn = scoredMotifs_occurence[child,]
			whiteMarbles_Select = scoredMotifs_occurence[motif,]
			select_size = urn_size # revisit
			chi_squared([[urn_size,whiteMarbles_Urn],[select_size,whiteMarbles_Select]...2x2x2?])



################################################################################
###################################
### Representative Motif Comparison - 2 glycoprofiles
###################################

# Occurance based
def hier_enrich_compareGlycoprofiles_occurence(scored_motif_vec1 , scored_motif_vec2 , motif_hierarchy):
	"""Perform Hierarchical Enrichment: Compare integer motif scores

	"""

# Abundance-based
def hier_enrich_compareGlycoprofiles_abundance(scored_motif_vec1 , scored_motif_vec2 , motif_hierarchy):
