

# ###################################
# ### Unique Motif Extraction         - multiple glycoprofile
# ###################################

# # Occurance based
# def hier_enrich_glycoprofile_occurence(glycoprofile,scoredMotifs_occurence_matrix,motif_hierarchy,motif_vector,method='chi_squared',relative='child'):
#     """Perform Hierarchical Enrichment: Motifs occuring in a significant number of glycans using hypergeometric enrichment.

#     Keyword arguments:
#     glycoprofile -- list of glycans
#     scoredMotifs_abundance_matrix -- integer matrix, motif abundance for each glycoprofile (same dimesion of motif_vector)
#     motif_hierarchy -- edgelist of motif membership relations (generated by motif_lib.motif_dependence_tree())
#     motif_vector -- list of motifs
#     """
#     # checks
#     assert type(motif_hierarchy)==np.ndarray and motif_hierarchy.shape[1]==2
#     # run
#     rep_motif_p = []
#     # Number of marbles in the urn is the number of glycans in the glycoprofile
#     urn_size = len(glycoprofile)
#     # Traverse the `motif hierarchy`
#     for motif in motif_vector:
#         children = relative(motif,motif_hierarchy,dir=relative)
#         child_p = []
#         for child in children:
#             whiteMarbles_Urn = scoredMotifs_occurence[child,]
#             whiteMarbles_Select = scoredMotifs_occurence[motif,]
#             select_size = urn_size # revisit
#             chi_squared([[urn_size,whiteMarbles_Urn],[select_size,whiteMarbles_Select]...2x2x2?])




# ################################################################################
# ###################################
# ### Representative Motif Comparison - 2 glycoprofiles
# ###################################
#
# # Occurance based
# def hier_enrich_compareGlycoprofiles_occurence(scored_motif_vec1 , scored_motif_vec2, motif_hierarchy):
#     """Perform Hierarchical Enrichment: Compare integer motif scores
#
#     """
#
# # Abundance-based
# def hier_enrich_compareGlycoprofiles_abundance(scored_motif_vec1 , scored_motif_vec2 , motif_hierarchy):

# def test():
# load glycoprofiles
# abundance_data_table = json_utility.load_json("../generated_json_file/NBT_dict_name_abundance_cross_profile.json")
# merged_glycan_profile, _ = glycan_profile.load_glycan_profile_dic()
# glycan_profiles_obj = glycan_profile.combine_profile_mz_with_motif_existance(merged_glycan_profile,
#                                                                              abundance_data_table)
# motif_abd_table = glycan_profiles_obj.table_against_wt_relative_abd()
# motif_abd_table.head()
#
# # load motif vector and return edge_list
# # motif_vector = json_utility.load_json("../generated_json_file/Unicarbkb_motif_vec_12259.json")
# # motif_lib = gc_glycan_motif.GlycanMotifLib(motif_dict)
# motif_lib = motif_class.GlycanMotifLib(
#     json_utility.load_json(__init__.output_motif_dic_degree_list_addr))  # unicarbkb_motifs_12259.json
# tree_type_dp, edge_list = motif_lib.motif_dependence_tree()
#
# # representative motif extraction from 1 glycoprofile
# hier_enrich_glycoprofile_occurence(glycoprofile, scoredMotifs_occurence_vector, np.array(edge_list), motif_vector)